// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output = "./node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  cart          Cart?
  payments      Payment[]
  
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  postalCode String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  slug        String    @unique
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products    Product[]
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String
  price         Float
  comparePrice  Float?
  sku           String   @unique
  inventory     Int      @default(0)
  isAvailable   Boolean  @default(true)
  images        String[]
  slug          String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])
  
  variants      ProductVariant[]
  reviews       Review[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
}

model ProductVariant {
  id           String   @id @default(cuid())
  name         String
  price        Float
  inventory    Int      @default(0)
  isAvailable  Boolean  @default(true)
  sku          String   @unique
  options      Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  orderItems   OrderItem[]
  cartItems    CartItem[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  status        OrderStatus @default(PENDING)
  total         Float
  subtotal      Float
  tax           Float
  shipping      Float
  discount      Float       @default(0)
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  addressId     String
  address       Address     @relation(fields: [addressId], references: [id])
  
  items         OrderItem[]
  payment       Payment?
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  name      String
  variant   String?
  sku       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  
  variantId String?
  productVariant ProductVariant? @relation(fields: [variantId], references: [id])
}

model Payment {
  id              String   @id @default(cuid())
  amount          Float
  paymentMethod   String
  status          String
  stripePaymentId String?  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  orderId         String   @unique
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
